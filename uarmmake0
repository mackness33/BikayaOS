# Cross toolchain variables
# If these are not in your path, you can make them absolute.
XT_PRG_PREFIX = arm-none-eabi-
CC = $(XT_PRG_PREFIX)gcc
LD = $(XT_PRG_PREFIX)ld

# uARM-related paths
UARM_DIR = /usr/include
UARM_DATA_DIR = $(UARM_DIR)/uarm

# Compiler options
CFLAGS_LANG =
CFLAGS_UARM = -mcpu=arm7tdmi -DTARGET_UARM=1
CFLAGS = $(CFLAGS_LANG) $(CFLAGS_UARM)  -I$(UARM_DIR)/uarm -Wall -O0

# Linker options
LDFLAGS = -G 0 -nostdlib -T $(UARM_DATA_DIR)/ldscripts/elf32ltsarm.h.uarmcore.x

# Add the location of crt*.S to the search path
VPATH = $(UARM_DATA_DIR)

.PHONY : all clean

all : kernel15

kernel : phase0/main.o phase0/printprint.o phase0/term.o crtso.o libuarm.o
	$(LD) -o $@ $^ $(LDFLAGS)

kernel1 : phase1.0/source/main1.o phase1.0/source/pcb.o phase1.0/source/asl.o phase1.0/source/p1test_bikaya_v0.o crtso.o libuarm.o
	$(LD) -o $@ $^ $(LDFLAGS)

kernel15:  source/main0.o crtso.o libuarm.o source/scheduler.o source/pcb.o source/asl.o source/interrupts.o source/scheduler.o source/syscall.o source/p15test_bikaya_v0.o source/utils.o
	$(LD) -o $@ $^ $(LDFLAGS)

clean1:
	-rm -f kernel1 kernel.*.uarm *.uarm phase1.0/source/*.o *.o

# Pattern rule for assembly modules
%.o : %.s
	$(CC) $(CFLAGS) -c -o $@ $<
